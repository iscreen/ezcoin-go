// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: ezcoinrobot.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The request message containing the user's name.
type RobotRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Currency string `protobuf:"bytes,2,opt,name=currency,proto3" json:"currency,omitempty"`
}

func (x *RobotRequest) Reset() {
	*x = RobotRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ezcoinrobot_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RobotRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RobotRequest) ProtoMessage() {}

func (x *RobotRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ezcoinrobot_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RobotRequest.ProtoReflect.Descriptor instead.
func (*RobotRequest) Descriptor() ([]byte, []int) {
	return file_ezcoinrobot_proto_rawDescGZIP(), []int{0}
}

func (x *RobotRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RobotRequest) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

// The request message containing the user's name.
type RobotMigrateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	FromCurrency string `protobuf:"bytes,2,opt,name=fromCurrency,proto3" json:"fromCurrency,omitempty"`
	ToCurrency   string `protobuf:"bytes,3,opt,name=toCurrency,proto3" json:"toCurrency,omitempty"`
}

func (x *RobotMigrateRequest) Reset() {
	*x = RobotMigrateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ezcoinrobot_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RobotMigrateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RobotMigrateRequest) ProtoMessage() {}

func (x *RobotMigrateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ezcoinrobot_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RobotMigrateRequest.ProtoReflect.Descriptor instead.
func (*RobotMigrateRequest) Descriptor() ([]byte, []int) {
	return file_ezcoinrobot_proto_rawDescGZIP(), []int{1}
}

func (x *RobotMigrateRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RobotMigrateRequest) GetFromCurrency() string {
	if x != nil {
		return x.FromCurrency
	}
	return ""
}

func (x *RobotMigrateRequest) GetToCurrency() string {
	if x != nil {
		return x.ToCurrency
	}
	return ""
}

// The response message containing the greetings
type CreateReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *CreateReply) Reset() {
	*x = CreateReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ezcoinrobot_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateReply) ProtoMessage() {}

func (x *CreateReply) ProtoReflect() protoreflect.Message {
	mi := &file_ezcoinrobot_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateReply.ProtoReflect.Descriptor instead.
func (*CreateReply) Descriptor() ([]byte, []int) {
	return file_ezcoinrobot_proto_rawDescGZIP(), []int{2}
}

func (x *CreateReply) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CreateReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// The response state containing the status
type StatusReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	State   string `protobuf:"bytes,3,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *StatusReply) Reset() {
	*x = StatusReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ezcoinrobot_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusReply) ProtoMessage() {}

func (x *StatusReply) ProtoReflect() protoreflect.Message {
	mi := &file_ezcoinrobot_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusReply.ProtoReflect.Descriptor instead.
func (*StatusReply) Descriptor() ([]byte, []int) {
	return file_ezcoinrobot_proto_rawDescGZIP(), []int{3}
}

func (x *StatusReply) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *StatusReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *StatusReply) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

// The request message containing the user's name.
type FundingRobotRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Currency string `protobuf:"bytes,2,opt,name=currency,proto3" json:"currency,omitempty"`
}

func (x *FundingRobotRequest) Reset() {
	*x = FundingRobotRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ezcoinrobot_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FundingRobotRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FundingRobotRequest) ProtoMessage() {}

func (x *FundingRobotRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ezcoinrobot_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FundingRobotRequest.ProtoReflect.Descriptor instead.
func (*FundingRobotRequest) Descriptor() ([]byte, []int) {
	return file_ezcoinrobot_proto_rawDescGZIP(), []int{4}
}

func (x *FundingRobotRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FundingRobotRequest) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

// The response message containing the greetings
type CreateFundingReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *CreateFundingReply) Reset() {
	*x = CreateFundingReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ezcoinrobot_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateFundingReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFundingReply) ProtoMessage() {}

func (x *CreateFundingReply) ProtoReflect() protoreflect.Message {
	mi := &file_ezcoinrobot_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFundingReply.ProtoReflect.Descriptor instead.
func (*CreateFundingReply) Descriptor() ([]byte, []int) {
	return file_ezcoinrobot_proto_rawDescGZIP(), []int{5}
}

func (x *CreateFundingReply) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CreateFundingReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// The response state containing the status
type FundingStatusReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	State   string `protobuf:"bytes,3,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *FundingStatusReply) Reset() {
	*x = FundingStatusReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ezcoinrobot_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FundingStatusReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FundingStatusReply) ProtoMessage() {}

func (x *FundingStatusReply) ProtoReflect() protoreflect.Message {
	mi := &file_ezcoinrobot_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FundingStatusReply.ProtoReflect.Descriptor instead.
func (*FundingStatusReply) Descriptor() ([]byte, []int) {
	return file_ezcoinrobot_proto_rawDescGZIP(), []int{6}
}

func (x *FundingStatusReply) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *FundingStatusReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *FundingStatusReply) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

// The request message containing the user's name.
type FundingRobotMigrateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	FromCurrency string `protobuf:"bytes,2,opt,name=fromCurrency,proto3" json:"fromCurrency,omitempty"`
	ToCurrency   string `protobuf:"bytes,3,opt,name=toCurrency,proto3" json:"toCurrency,omitempty"`
}

func (x *FundingRobotMigrateRequest) Reset() {
	*x = FundingRobotMigrateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ezcoinrobot_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FundingRobotMigrateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FundingRobotMigrateRequest) ProtoMessage() {}

func (x *FundingRobotMigrateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ezcoinrobot_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FundingRobotMigrateRequest.ProtoReflect.Descriptor instead.
func (*FundingRobotMigrateRequest) Descriptor() ([]byte, []int) {
	return file_ezcoinrobot_proto_rawDescGZIP(), []int{7}
}

func (x *FundingRobotMigrateRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FundingRobotMigrateRequest) GetFromCurrency() string {
	if x != nil {
		return x.FromCurrency
	}
	return ""
}

func (x *FundingRobotMigrateRequest) GetToCurrency() string {
	if x != nil {
		return x.ToCurrency
	}
	return ""
}

var File_ezcoinrobot_proto protoreflect.FileDescriptor

var file_ezcoinrobot_proto_rawDesc = []byte{
	0x0a, 0x11, 0x65, 0x7a, 0x63, 0x6f, 0x69, 0x6e, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x3e, 0x0a, 0x0c, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x22, 0x6d, 0x0a, 0x13, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x4d, 0x69, 0x67, 0x72,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x22,
	0x0a, 0x0c, 0x66, 0x72, 0x6f, 0x6d, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x72, 0x6f, 0x6d, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x6f, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x6f, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x22, 0x3b, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22,
	0x51, 0x0a, 0x0b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x22, 0x45, 0x0a, 0x13, 0x46, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x6f, 0x62,
	0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x22, 0x42, 0x0a, 0x12, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x46, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x58, 0x0a,
	0x12, 0x46, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x74, 0x0a, 0x1a, 0x46, 0x75, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x72, 0x6f,
	0x6d, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x66, 0x72, 0x6f, 0x6d, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x1e, 0x0a,
	0x0a, 0x74, 0x6f, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x74, 0x6f, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x32, 0xbf, 0x05,
	0x0a, 0x0b, 0x45, 0x5a, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x12, 0x2c, 0x0a,
	0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x12, 0x0d, 0x2e, 0x52,
	0x6f, 0x62, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0c, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x2c, 0x0a, 0x0b, 0x52,
	0x6f, 0x62, 0x6f, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0d, 0x2e, 0x52, 0x6f, 0x62,
	0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0c, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x2a, 0x0a, 0x09, 0x53, 0x74, 0x6f,
	0x70, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x12, 0x0d, 0x2e, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0c, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x2b, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x6f,
	0x62, 0x6f, 0x74, 0x12, 0x0d, 0x2e, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x0c, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x00, 0x12, 0x2d, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x52, 0x6f, 0x62,
	0x6f, 0x74, 0x12, 0x0d, 0x2e, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x0c, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x00, 0x12, 0x34, 0x0a, 0x0c, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x62, 0x6f,
	0x74, 0x12, 0x14, 0x2e, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0c, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x46, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x12, 0x14, 0x2e,
	0x46, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x75, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x12, 0x46, 0x75,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x14, 0x2e, 0x46, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x46, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x3f, 0x0a,
	0x10, 0x53, 0x74, 0x6f, 0x70, 0x46, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x6f, 0x62, 0x6f,
	0x74, 0x12, 0x14, 0x2e, 0x46, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x6f, 0x62, 0x6f, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x46, 0x75, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x40,
	0x0a, 0x11, 0x53, 0x74, 0x61, 0x72, 0x74, 0x46, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x6f,
	0x62, 0x6f, 0x74, 0x12, 0x14, 0x2e, 0x46, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x6f, 0x62,
	0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x46, 0x75, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00,
	0x12, 0x42, 0x0a, 0x13, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x46, 0x75, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x12, 0x14, 0x2e, 0x46, 0x75, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e,
	0x46, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x13, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x46,
	0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x12, 0x1b, 0x2e, 0x46, 0x75,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x46, 0x75, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x42,
	0x0c, 0x5a, 0x0a, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ezcoinrobot_proto_rawDescOnce sync.Once
	file_ezcoinrobot_proto_rawDescData = file_ezcoinrobot_proto_rawDesc
)

func file_ezcoinrobot_proto_rawDescGZIP() []byte {
	file_ezcoinrobot_proto_rawDescOnce.Do(func() {
		file_ezcoinrobot_proto_rawDescData = protoimpl.X.CompressGZIP(file_ezcoinrobot_proto_rawDescData)
	})
	return file_ezcoinrobot_proto_rawDescData
}

var file_ezcoinrobot_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_ezcoinrobot_proto_goTypes = []interface{}{
	(*RobotRequest)(nil),               // 0: RobotRequest
	(*RobotMigrateRequest)(nil),        // 1: RobotMigrateRequest
	(*CreateReply)(nil),                // 2: CreateReply
	(*StatusReply)(nil),                // 3: StatusReply
	(*FundingRobotRequest)(nil),        // 4: FundingRobotRequest
	(*CreateFundingReply)(nil),         // 5: CreateFundingReply
	(*FundingStatusReply)(nil),         // 6: FundingStatusReply
	(*FundingRobotMigrateRequest)(nil), // 7: FundingRobotMigrateRequest
}
var file_ezcoinrobot_proto_depIdxs = []int32{
	0,  // 0: EZCoinRobot.CreateRobot:input_type -> RobotRequest
	0,  // 1: EZCoinRobot.RobotStatus:input_type -> RobotRequest
	0,  // 2: EZCoinRobot.StopRobot:input_type -> RobotRequest
	0,  // 3: EZCoinRobot.StartRobot:input_type -> RobotRequest
	0,  // 4: EZCoinRobot.RestartRobot:input_type -> RobotRequest
	1,  // 5: EZCoinRobot.MigrateRobot:input_type -> RobotMigrateRequest
	4,  // 6: EZCoinRobot.CreateFundingRobot:input_type -> FundingRobotRequest
	4,  // 7: EZCoinRobot.FundingRobotStatus:input_type -> FundingRobotRequest
	4,  // 8: EZCoinRobot.StopFundingRobot:input_type -> FundingRobotRequest
	4,  // 9: EZCoinRobot.StartFundingRobot:input_type -> FundingRobotRequest
	4,  // 10: EZCoinRobot.RestartFundingRobot:input_type -> FundingRobotRequest
	7,  // 11: EZCoinRobot.MigrateFundingRobot:input_type -> FundingRobotMigrateRequest
	2,  // 12: EZCoinRobot.CreateRobot:output_type -> CreateReply
	3,  // 13: EZCoinRobot.RobotStatus:output_type -> StatusReply
	3,  // 14: EZCoinRobot.StopRobot:output_type -> StatusReply
	3,  // 15: EZCoinRobot.StartRobot:output_type -> StatusReply
	3,  // 16: EZCoinRobot.RestartRobot:output_type -> StatusReply
	3,  // 17: EZCoinRobot.MigrateRobot:output_type -> StatusReply
	5,  // 18: EZCoinRobot.CreateFundingRobot:output_type -> CreateFundingReply
	6,  // 19: EZCoinRobot.FundingRobotStatus:output_type -> FundingStatusReply
	6,  // 20: EZCoinRobot.StopFundingRobot:output_type -> FundingStatusReply
	6,  // 21: EZCoinRobot.StartFundingRobot:output_type -> FundingStatusReply
	6,  // 22: EZCoinRobot.RestartFundingRobot:output_type -> FundingStatusReply
	6,  // 23: EZCoinRobot.MigrateFundingRobot:output_type -> FundingStatusReply
	12, // [12:24] is the sub-list for method output_type
	0,  // [0:12] is the sub-list for method input_type
	0,  // [0:0] is the sub-list for extension type_name
	0,  // [0:0] is the sub-list for extension extendee
	0,  // [0:0] is the sub-list for field type_name
}

func init() { file_ezcoinrobot_proto_init() }
func file_ezcoinrobot_proto_init() {
	if File_ezcoinrobot_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_ezcoinrobot_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RobotRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ezcoinrobot_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RobotMigrateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ezcoinrobot_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ezcoinrobot_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatusReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ezcoinrobot_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FundingRobotRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ezcoinrobot_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateFundingReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ezcoinrobot_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FundingStatusReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ezcoinrobot_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FundingRobotMigrateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ezcoinrobot_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_ezcoinrobot_proto_goTypes,
		DependencyIndexes: file_ezcoinrobot_proto_depIdxs,
		MessageInfos:      file_ezcoinrobot_proto_msgTypes,
	}.Build()
	File_ezcoinrobot_proto = out.File
	file_ezcoinrobot_proto_rawDesc = nil
	file_ezcoinrobot_proto_goTypes = nil
	file_ezcoinrobot_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// EZCoinRobotClient is the client API for EZCoinRobot service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EZCoinRobotClient interface {
	// Sends a greeting
	CreateRobot(ctx context.Context, in *RobotRequest, opts ...grpc.CallOption) (*CreateReply, error)
	RobotStatus(ctx context.Context, in *RobotRequest, opts ...grpc.CallOption) (*StatusReply, error)
	StopRobot(ctx context.Context, in *RobotRequest, opts ...grpc.CallOption) (*StatusReply, error)
	StartRobot(ctx context.Context, in *RobotRequest, opts ...grpc.CallOption) (*StatusReply, error)
	RestartRobot(ctx context.Context, in *RobotRequest, opts ...grpc.CallOption) (*StatusReply, error)
	MigrateRobot(ctx context.Context, in *RobotMigrateRequest, opts ...grpc.CallOption) (*StatusReply, error)
	CreateFundingRobot(ctx context.Context, in *FundingRobotRequest, opts ...grpc.CallOption) (*CreateFundingReply, error)
	FundingRobotStatus(ctx context.Context, in *FundingRobotRequest, opts ...grpc.CallOption) (*FundingStatusReply, error)
	StopFundingRobot(ctx context.Context, in *FundingRobotRequest, opts ...grpc.CallOption) (*FundingStatusReply, error)
	StartFundingRobot(ctx context.Context, in *FundingRobotRequest, opts ...grpc.CallOption) (*FundingStatusReply, error)
	RestartFundingRobot(ctx context.Context, in *FundingRobotRequest, opts ...grpc.CallOption) (*FundingStatusReply, error)
	MigrateFundingRobot(ctx context.Context, in *FundingRobotMigrateRequest, opts ...grpc.CallOption) (*FundingStatusReply, error)
}

type eZCoinRobotClient struct {
	cc grpc.ClientConnInterface
}

func NewEZCoinRobotClient(cc grpc.ClientConnInterface) EZCoinRobotClient {
	return &eZCoinRobotClient{cc}
}

func (c *eZCoinRobotClient) CreateRobot(ctx context.Context, in *RobotRequest, opts ...grpc.CallOption) (*CreateReply, error) {
	out := new(CreateReply)
	err := c.cc.Invoke(ctx, "/EZCoinRobot/CreateRobot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eZCoinRobotClient) RobotStatus(ctx context.Context, in *RobotRequest, opts ...grpc.CallOption) (*StatusReply, error) {
	out := new(StatusReply)
	err := c.cc.Invoke(ctx, "/EZCoinRobot/RobotStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eZCoinRobotClient) StopRobot(ctx context.Context, in *RobotRequest, opts ...grpc.CallOption) (*StatusReply, error) {
	out := new(StatusReply)
	err := c.cc.Invoke(ctx, "/EZCoinRobot/StopRobot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eZCoinRobotClient) StartRobot(ctx context.Context, in *RobotRequest, opts ...grpc.CallOption) (*StatusReply, error) {
	out := new(StatusReply)
	err := c.cc.Invoke(ctx, "/EZCoinRobot/StartRobot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eZCoinRobotClient) RestartRobot(ctx context.Context, in *RobotRequest, opts ...grpc.CallOption) (*StatusReply, error) {
	out := new(StatusReply)
	err := c.cc.Invoke(ctx, "/EZCoinRobot/RestartRobot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eZCoinRobotClient) MigrateRobot(ctx context.Context, in *RobotMigrateRequest, opts ...grpc.CallOption) (*StatusReply, error) {
	out := new(StatusReply)
	err := c.cc.Invoke(ctx, "/EZCoinRobot/MigrateRobot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eZCoinRobotClient) CreateFundingRobot(ctx context.Context, in *FundingRobotRequest, opts ...grpc.CallOption) (*CreateFundingReply, error) {
	out := new(CreateFundingReply)
	err := c.cc.Invoke(ctx, "/EZCoinRobot/CreateFundingRobot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eZCoinRobotClient) FundingRobotStatus(ctx context.Context, in *FundingRobotRequest, opts ...grpc.CallOption) (*FundingStatusReply, error) {
	out := new(FundingStatusReply)
	err := c.cc.Invoke(ctx, "/EZCoinRobot/FundingRobotStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eZCoinRobotClient) StopFundingRobot(ctx context.Context, in *FundingRobotRequest, opts ...grpc.CallOption) (*FundingStatusReply, error) {
	out := new(FundingStatusReply)
	err := c.cc.Invoke(ctx, "/EZCoinRobot/StopFundingRobot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eZCoinRobotClient) StartFundingRobot(ctx context.Context, in *FundingRobotRequest, opts ...grpc.CallOption) (*FundingStatusReply, error) {
	out := new(FundingStatusReply)
	err := c.cc.Invoke(ctx, "/EZCoinRobot/StartFundingRobot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eZCoinRobotClient) RestartFundingRobot(ctx context.Context, in *FundingRobotRequest, opts ...grpc.CallOption) (*FundingStatusReply, error) {
	out := new(FundingStatusReply)
	err := c.cc.Invoke(ctx, "/EZCoinRobot/RestartFundingRobot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eZCoinRobotClient) MigrateFundingRobot(ctx context.Context, in *FundingRobotMigrateRequest, opts ...grpc.CallOption) (*FundingStatusReply, error) {
	out := new(FundingStatusReply)
	err := c.cc.Invoke(ctx, "/EZCoinRobot/MigrateFundingRobot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EZCoinRobotServer is the server API for EZCoinRobot service.
type EZCoinRobotServer interface {
	// Sends a greeting
	CreateRobot(context.Context, *RobotRequest) (*CreateReply, error)
	RobotStatus(context.Context, *RobotRequest) (*StatusReply, error)
	StopRobot(context.Context, *RobotRequest) (*StatusReply, error)
	StartRobot(context.Context, *RobotRequest) (*StatusReply, error)
	RestartRobot(context.Context, *RobotRequest) (*StatusReply, error)
	MigrateRobot(context.Context, *RobotMigrateRequest) (*StatusReply, error)
	CreateFundingRobot(context.Context, *FundingRobotRequest) (*CreateFundingReply, error)
	FundingRobotStatus(context.Context, *FundingRobotRequest) (*FundingStatusReply, error)
	StopFundingRobot(context.Context, *FundingRobotRequest) (*FundingStatusReply, error)
	StartFundingRobot(context.Context, *FundingRobotRequest) (*FundingStatusReply, error)
	RestartFundingRobot(context.Context, *FundingRobotRequest) (*FundingStatusReply, error)
	MigrateFundingRobot(context.Context, *FundingRobotMigrateRequest) (*FundingStatusReply, error)
}

// UnimplementedEZCoinRobotServer can be embedded to have forward compatible implementations.
type UnimplementedEZCoinRobotServer struct {
}

func (*UnimplementedEZCoinRobotServer) CreateRobot(context.Context, *RobotRequest) (*CreateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRobot not implemented")
}
func (*UnimplementedEZCoinRobotServer) RobotStatus(context.Context, *RobotRequest) (*StatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RobotStatus not implemented")
}
func (*UnimplementedEZCoinRobotServer) StopRobot(context.Context, *RobotRequest) (*StatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopRobot not implemented")
}
func (*UnimplementedEZCoinRobotServer) StartRobot(context.Context, *RobotRequest) (*StatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartRobot not implemented")
}
func (*UnimplementedEZCoinRobotServer) RestartRobot(context.Context, *RobotRequest) (*StatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestartRobot not implemented")
}
func (*UnimplementedEZCoinRobotServer) MigrateRobot(context.Context, *RobotMigrateRequest) (*StatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MigrateRobot not implemented")
}
func (*UnimplementedEZCoinRobotServer) CreateFundingRobot(context.Context, *FundingRobotRequest) (*CreateFundingReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFundingRobot not implemented")
}
func (*UnimplementedEZCoinRobotServer) FundingRobotStatus(context.Context, *FundingRobotRequest) (*FundingStatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FundingRobotStatus not implemented")
}
func (*UnimplementedEZCoinRobotServer) StopFundingRobot(context.Context, *FundingRobotRequest) (*FundingStatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopFundingRobot not implemented")
}
func (*UnimplementedEZCoinRobotServer) StartFundingRobot(context.Context, *FundingRobotRequest) (*FundingStatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartFundingRobot not implemented")
}
func (*UnimplementedEZCoinRobotServer) RestartFundingRobot(context.Context, *FundingRobotRequest) (*FundingStatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestartFundingRobot not implemented")
}
func (*UnimplementedEZCoinRobotServer) MigrateFundingRobot(context.Context, *FundingRobotMigrateRequest) (*FundingStatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MigrateFundingRobot not implemented")
}

func RegisterEZCoinRobotServer(s *grpc.Server, srv EZCoinRobotServer) {
	s.RegisterService(&_EZCoinRobot_serviceDesc, srv)
}

func _EZCoinRobot_CreateRobot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RobotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EZCoinRobotServer).CreateRobot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/EZCoinRobot/CreateRobot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EZCoinRobotServer).CreateRobot(ctx, req.(*RobotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EZCoinRobot_RobotStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RobotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EZCoinRobotServer).RobotStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/EZCoinRobot/RobotStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EZCoinRobotServer).RobotStatus(ctx, req.(*RobotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EZCoinRobot_StopRobot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RobotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EZCoinRobotServer).StopRobot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/EZCoinRobot/StopRobot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EZCoinRobotServer).StopRobot(ctx, req.(*RobotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EZCoinRobot_StartRobot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RobotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EZCoinRobotServer).StartRobot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/EZCoinRobot/StartRobot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EZCoinRobotServer).StartRobot(ctx, req.(*RobotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EZCoinRobot_RestartRobot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RobotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EZCoinRobotServer).RestartRobot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/EZCoinRobot/RestartRobot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EZCoinRobotServer).RestartRobot(ctx, req.(*RobotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EZCoinRobot_MigrateRobot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RobotMigrateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EZCoinRobotServer).MigrateRobot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/EZCoinRobot/MigrateRobot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EZCoinRobotServer).MigrateRobot(ctx, req.(*RobotMigrateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EZCoinRobot_CreateFundingRobot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FundingRobotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EZCoinRobotServer).CreateFundingRobot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/EZCoinRobot/CreateFundingRobot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EZCoinRobotServer).CreateFundingRobot(ctx, req.(*FundingRobotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EZCoinRobot_FundingRobotStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FundingRobotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EZCoinRobotServer).FundingRobotStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/EZCoinRobot/FundingRobotStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EZCoinRobotServer).FundingRobotStatus(ctx, req.(*FundingRobotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EZCoinRobot_StopFundingRobot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FundingRobotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EZCoinRobotServer).StopFundingRobot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/EZCoinRobot/StopFundingRobot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EZCoinRobotServer).StopFundingRobot(ctx, req.(*FundingRobotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EZCoinRobot_StartFundingRobot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FundingRobotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EZCoinRobotServer).StartFundingRobot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/EZCoinRobot/StartFundingRobot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EZCoinRobotServer).StartFundingRobot(ctx, req.(*FundingRobotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EZCoinRobot_RestartFundingRobot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FundingRobotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EZCoinRobotServer).RestartFundingRobot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/EZCoinRobot/RestartFundingRobot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EZCoinRobotServer).RestartFundingRobot(ctx, req.(*FundingRobotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EZCoinRobot_MigrateFundingRobot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FundingRobotMigrateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EZCoinRobotServer).MigrateFundingRobot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/EZCoinRobot/MigrateFundingRobot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EZCoinRobotServer).MigrateFundingRobot(ctx, req.(*FundingRobotMigrateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _EZCoinRobot_serviceDesc = grpc.ServiceDesc{
	ServiceName: "EZCoinRobot",
	HandlerType: (*EZCoinRobotServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRobot",
			Handler:    _EZCoinRobot_CreateRobot_Handler,
		},
		{
			MethodName: "RobotStatus",
			Handler:    _EZCoinRobot_RobotStatus_Handler,
		},
		{
			MethodName: "StopRobot",
			Handler:    _EZCoinRobot_StopRobot_Handler,
		},
		{
			MethodName: "StartRobot",
			Handler:    _EZCoinRobot_StartRobot_Handler,
		},
		{
			MethodName: "RestartRobot",
			Handler:    _EZCoinRobot_RestartRobot_Handler,
		},
		{
			MethodName: "MigrateRobot",
			Handler:    _EZCoinRobot_MigrateRobot_Handler,
		},
		{
			MethodName: "CreateFundingRobot",
			Handler:    _EZCoinRobot_CreateFundingRobot_Handler,
		},
		{
			MethodName: "FundingRobotStatus",
			Handler:    _EZCoinRobot_FundingRobotStatus_Handler,
		},
		{
			MethodName: "StopFundingRobot",
			Handler:    _EZCoinRobot_StopFundingRobot_Handler,
		},
		{
			MethodName: "StartFundingRobot",
			Handler:    _EZCoinRobot_StartFundingRobot_Handler,
		},
		{
			MethodName: "RestartFundingRobot",
			Handler:    _EZCoinRobot_RestartFundingRobot_Handler,
		},
		{
			MethodName: "MigrateFundingRobot",
			Handler:    _EZCoinRobot_MigrateFundingRobot_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ezcoinrobot.proto",
}
